name: "Build Kernel GKI 5.10"

env:
  OUT_DIR: "out"

on:
  schedule:
    - cron: "0 0 * * 0" # Every Sunday at midnight
  workflow_dispatch:

jobs:
  Set-repos:
    name: "üêÇ Parse repository"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          repos='[
            {
              "kernelSource": {
                "repo": "",
                "branch": ""
              },
              "params": {
                "ARCH": "arm64",
                "CROSS_COMPILE": "aarch64-linux-gnu-",
                "CLANG_TRIPLE": "aarch64-linux-gnu-",
                "AR": "llvm-ar",
                "CC": "clang"
              }
            }
          ]'

          repos=$(echo "$repos" | jq --arg url "https://android.googlesource.com/kernel/common" --arg branch "android12-5.10-lts" '.[].kernelSource.repo = $url | .[].kernelSource.branch = $branch')

          echo "repos<<EOF" >> $GITHUB_OUTPUT
          echo "$repos" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: common_gki
      kernelSourceURL: https://android.googlesource.com/kernel/common
      kernelName: common
      kernelBranch: android12-5.10-lts
      kernelDevice: gki
      DEFCONFIG_NAME: gki_defconfig

    steps:
      - name: "‚ú® Setup workspace"
        run: |
          mkdir -p $kernelDir

          echo "BUILD_TIME=$(date +'%Y-%m-%d')" >> $GITHUB_ENV

          sudo apt-get update
          sudo apt-get install -y build-essential bc curl flex cpio ccache rsync git zip dwarves libelf-dev gcc-aarch64-linux-gnu libssl-dev python3 clang lld llvm llvm-dev

      - name: "üåü Clone kernel source => (${{ env.kernelSourceURL}})"
        working-directory: ./${{ env.kernelDir }}
        run: |
          set -x
          git clone --recursive --branch ${{ env.kernelBranch }} \
            ${{ env.kernelSourceURL }} ${{ env.kernelName }} --depth=1

      - name: "üí´ Get Toolchains"
        run: |
          set -e
          
          get_latest_github_release() {
            local repo_url="$1"
            latest_url=$(curl -sL "https://api.github.com/repos/$repo_url/releases/latest" | grep "browser_download_url.*tar.gz" | cut -d '"' -f 4 | head -n 1)
            
            if [[ -z "$latest_url" ]]; then
              echo "‚ùå Failed to fetch latest release from $repo_url!"
              exit 1
            fi
      
            printf "%s" "$latest_url"
          }

          clang_url=$(get_latest_github_release "greenforce-project/greenforce_clang")

          mkdir -p clang
          wget --progress=bar:force -O "clang/clang.tar.gz" "$clang_url" || { echo "‚ùå Failed to download Clang!"; exit 1; }
          tar -xf clang/clang.tar.gz -C clang || { echo "‚ùå Extraction failed!"; exit 1; }
          rm -f clang/clang.tar.gz
          
          CLANG_PATH=$(find clang -type d -name "bin" | head -n 1)
          CLANG_PATH="${{ github.workspace }}/${CLANG_PATH}"
      
          echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
          echo "$CLANG_PATH" >> $GITHUB_PATH
      
          export PATH="$CLANG_PATH:$PATH"
          export CLANG_TRIPLE="aarch64-linux-gnu-"
          export CC="ccache clang"
          export AR="llvm-ar"
          export AS="llvm-as"
          export NM="llvm-nm"
          export OBJCOPY="llvm-objcopy"
          export OBJDUMP="llvm-objdump"
          export STRIP="llvm-strip"
      
          clang --version

      - name: üìê Setup swap 30G
        uses: pierotofy/set-swap-space@master
        with:
            swap-size-gb: 30

      - name: üìê Tune Swap
        run: |
            echo "vm.swappiness=85" | sudo tee -a /etc/sysctl.conf
            sudo sysctl -p
        
      - name: "üì• Restore ccache Cache"
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: "‚ö° Configure ccache"
        run: |
            echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
            echo "CC='ccache clang'" >> $GITHUB_ENV
            echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV
          
      - name: "üòé Set args for GKI kernels"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
            params: "${{ toJSON(matrix.repos.params) }}"
        run: |
            args="-j$(nproc --all)"
            if [ -n "${{ env.OUT_DIR }}" ]; then
              mkdir -p $(pwd)/${{ env.OUT_DIR }}
              args="$args O=$(pwd)/${{ env.OUT_DIR }}"
            fi
            args="$args ARCH=arm64 LLVM=1 LTO=thin"
            args="$args CROSS_COMPILE=aarch64-linux-gnu-"
            args="$args CLANG_TRIPLE=aarch64-linux-gnu-"
            args="$args AR=llvm-ar"
            args="$args CC=clang"
            echo "args=$args" >> $GITHUB_OUTPUT          

      - name: "üß© Apply Kernel Fixup Patch"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          echo 'KBUILD_CFLAGS += -Wno-default-const-init-unsafe' >> Makefile

      - name: "üëç Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: "üé∂ Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          export KBUILD_BUILD_USER="Action"
          export KBUILD_BUILD_HOST="GitHub"

          ccache -z
        
          make ${args} \
            LLVM=1 \
            LTO=thin \
            CC="ccache clang" \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            STRIP=llvm-strip \
            -j$(nproc --all)
        
      - name: "üì§ Save ccache Cache"
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}
        
      - name: "üì¶ Pack Anykernel3"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -e
      
          [ ! -d "AnyKernel3" ] && git clone https://github.com/topnotchfreaks/AnyKernel3.git --depth=1
      
          KERNEL_IMAGE_PATH="../${{ env.OUT_DIR }}/arch/arm64/boot/Image"
          if [ ! -f "$KERNEL_IMAGE_PATH" ]; then
            KERNEL_IMAGE_PATH=$(find ../${{ env.OUT_DIR }}/arch/arm64/boot -name "Image*" | head -n 1)
            if [ -z "$KERNEL_IMAGE_PATH" ]; then
              echo "Error: No kernel image found."
              exit 1
            fi
          fi
      
          cp "$KERNEL_IMAGE_PATH" AnyKernel3/Image
      
          ZIP_NAME="${{ env.kernelBranch }}_${{ env.BUILD_TIME }}.zip"
          cd AnyKernel3
          zip -r9 "../$ZIP_NAME" * -x .git/*
          cd ..

          echo "ZIP_NAME=$ZIP_NAME" >> $GITHUB_ENV

          UPLOAD_ZIP_NAME="Anykernel3_${{ env.kernelBranch }}_${{ env.BUILD_TIME }}.zip"

          echo "UPLOAD_ZIP_NAME=$UPLOAD_ZIP_NAME" >> $GITHUB_ENV

      - name: "Rename kernel zip"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          UPLOAD_ZIP_NAME: ${{ env.UPLOAD_ZIP_NAME }}
        run: |
          mv "${{ env.kernelBranch }}_${{ env.BUILD_TIME }}.zip" "${UPLOAD_ZIP_NAME}"

      - name: "üöÄ Upload to GitHub Release"
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          files: ./${{ env.kernelDir }}/${{ env.kernelName }}/Anykernel3_${{ env.kernelBranch }}_${{ env.BUILD_TIME }}.zip
          name: "Kernel Release - ${{ env.kernelBranch }} - ${{ env.BUILD_TIME }}"
          tag_name: "${{ env.kernelBranch }}-${{ env.BUILD_TIME }}"
          body: |
            ‚úÖ Kernel built for: `${{ env.kernelDevice }}`
            üîó Source: [${{ env.kernelSourceURL }}](${{ env.kernelSourceURL }})
            üå± Branch: `${{ env.kernelBranch }}`
            üõ† Defconfig: `${{ env.DEFCONFIG_NAME }}`
            üß∞ Clang: Greenforce latest
            üìÖ Date: ${{ env.BUILD_TIME }}

            Built with ‚ù§Ô∏è via GitHub Actions.
